"""
VetDiagnosisAI - App Simples para Veterin√°rios
Interface focada apenas em predi√ß√µes r√°pidas
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import pickle
from pathlib import Path
from datetime import datetime
import sys
import traceback
import requests
import json
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="VetDiagnosisAI - Sistema Inteligente",
    page_icon="üêæ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# CSS personalizado para interface limpa e moderna
st.markdown("""
<style>
    .main-header {
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
        font-size: 2.5rem;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .prediction-box {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        text-align: center;
    }
    .metric-box {
        background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin: 0.5rem 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        border: 1px solid #ffb347;
    }
    .form-section {
        background-color: #f8f9fa;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid #28a745;
    }
    .symptom-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 10px;
        margin: 1rem 0;
    }
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.75rem 2rem;
        font-size: 1.1rem;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.3);
    }
    .success-message {
        background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        text-align: center;
        font-weight: bold;
    }
    .chat-message {
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        max-width: 80%;
    }
    .user-message {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        margin-left: auto;
        text-align: right;
    }
    .assistant-message {
        background: linear-gradient(135deg, #f0f2f6 0%, #e8f4f8 100%);
        color: #333;
        margin-right: auto;
    }
    .chat-container {
        height: 400px;
        overflow-y: auto;
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 1rem;
        background: #fafafa;
    }
    /* Esconder sidebar completamente */
    section[data-testid="stSidebar"] {display: none !important;}
    .stApp > div:first-child {padding-left: 1rem !important;}
    div[data-testid="stSidebar"] {display: none !important;}
    .css-1d391kg {display: none !important;}
    .css-1v0mbdj {display: none !important;}
    .css-1cypcdb {display: none !important;}
    .css-1v3fvcr {display: none !important;}
    .stApp > div:first-child > div:first-child {display: none !important;}
</style>
""", unsafe_allow_html=True)

# Header principal
st.markdown('<h1 class="main-header">üêæ VetDiagnosisAI - Sistema Inteligente</h1>', unsafe_allow_html=True)
st.markdown('<p style="text-align: center; color: #666;">Sistema Inteligente de Apoio ao Diagn√≥stico Veterin√°rio com IA Conversacional</p>', unsafe_allow_html=True)

# Inicializar session state para chat
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "chat_tabs" not in st.session_state:
    st.session_state.chat_tabs = ["Chat Principal"]

# Fun√ß√£o para chamar DeepSeek API
def call_deepseek_api(message, context=""):
    """Chama a API do DeepSeek para obter resposta inteligente"""
    try:
        # Configura√ß√£o da API (voc√™ pode adicionar sua chave API aqui)
        api_key = os.getenv("DEEPSEEK_API_KEY", "sk-your-api-key-here")
        
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        # Contexto veterin√°rio para melhorar as respostas
        system_prompt = f"""Voc√™ √© um assistente veterin√°rio inteligente especializado em diagn√≥stico e tratamento animal. 
        
        Contexto atual: {context}
        
        Responda de forma t√©cnica mas acess√≠vel, sempre considerando:
        - Sintomas apresentados
        - Poss√≠veis diagn√≥sticos diferenciais
        - Recomenda√ß√µes de exames complementares
        - Tratamentos sugeridos
        - Quando encaminhar para especialista
        
        Seja preciso, emp√°tico e educativo."""
        
        data = {
            "model": "deepseek-chat",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": message}
            ],
            "max_tokens": 1000,
            "temperature": 0.7
        }
        
        # Se n√£o tiver API key, usar resposta simulada
        if api_key == "sk-your-api-key-here":
            return f"ü§ñ **Assistente Veterin√°rio IA**\n\nBaseado na sua pergunta sobre '{message}', aqui est√£o algumas considera√ß√µes importantes:\n\n‚Ä¢ **Sintomas observados:** Analise detalhadamente todos os sintomas apresentados\n‚Ä¢ **Exames complementares:** Considere hemograma, bioqu√≠mica e exames espec√≠ficos\n‚Ä¢ **Diagn√≥stico diferencial:** Liste as principais hip√≥teses diagn√≥sticas\n‚Ä¢ **Tratamento:** Inicie tratamento sintom√°tico enquanto aguarda confirma√ß√£o\n\n*Para respostas mais precisas, configure sua chave API do DeepSeek nas configura√ß√µes.*"
        
        response = requests.post("https://api.deepseek.com/v1/chat/completions", 
                               headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            return result["choices"][0]["message"]["content"]
        else:
            return f"‚ùå Erro na API: {response.status_code}"
            
    except Exception as e:
        return f"‚ùå Erro ao conectar com IA: {str(e)}"

def obter_recomendacoes_personalizadas(diagnostico, sintomas, dados_laboratoriais):
    """Obt√©m recomenda√ß√µes personalizadas do DeepSeek baseadas no caso espec√≠fico"""
    try:
        # Montar contexto do caso
        contexto = f"""
        CASO VETERIN√ÅRIO:
        - Diagn√≥stico: {diagnostico}
        - Sintomas: {', '.join(sintomas)}
        - Dados laboratoriais: {dados_laboratoriais}
        
        Baseado neste caso espec√≠fico, forne√ßa recomenda√ß√µes detalhadas para:
        1. Exames complementares priorit√°rios
        2. Protocolo de medica√ß√£o com doses espec√≠ficas
        3. Protocolo cir√∫rgico se necess√°rio
        4. Protocolo de anestesia com medica√ß√µes e doses
        5. Monitoramento p√≥s-operat√≥rio
        
        Seja espec√≠fico com doses, frequ√™ncias e dura√ß√µes baseado na literatura veterin√°ria.
        """
        
        resposta = call_deepseek_api(contexto)
        return resposta
        
    except Exception as e:
        return f"‚ùå Erro ao obter recomenda√ß√µes personalizadas: {str(e)}"

# Fun√ß√µes para sugest√µes baseadas no diagn√≥stico
def sugerir_doencas(diagnostico):
    """Sugere doen√ßas relacionadas baseadas no diagn√≥stico"""
    doencas_sugeridas = {
        "Infec√ß√£o": ["Sepse", "Pneumonia", "Cistite", "Dermatite", "Otite"],
        "Intoxica√ß√£o": ["Envenenamento", "Insufici√™ncia hep√°tica", "Nefrotoxicidade", "Gastroenterite t√≥xica"],
        "Trauma": ["Fraturas", "Hemorragia interna", "Concuss√£o", "Lacera√ß√µes", "Hematomas"],
        "Tumor": ["Carcinoma", "Sarcoma", "Linfoma", "Adenoma", "Melanoma"],
        "Doen√ßa renal": ["Insufici√™ncia renal", "Nefrite", "C√°lculos renais", "Glomerulonefrite"],
        "Doen√ßa card√≠aca": ["Cardiomiopatia", "Arritmia", "Insufici√™ncia card√≠aca", "Endocardite"],
        "Diabetes": ["Cetoacidose", "Hipoglicemia", "Retinopatia", "Nefropatia diab√©tica"]
    }
    return doencas_sugeridas.get(diagnostico, ["Diagn√≥stico a confirmar com exames complementares"])

def sugerir_medicamentos(diagnostico):
    """Sugere medicamentos baseados no diagn√≥stico"""
    medicamentos = {
        "Infec√ß√£o": [
            {"nome": "Amoxicilina", "dose": "10-20 mg/kg", "frequencia": "2x/dia", "duracao": "7-10 dias"},
            {"nome": "Ceftriaxona", "dose": "25 mg/kg", "frequencia": "1x/dia", "duracao": "5-7 dias"},
            {"nome": "Metronidazol", "dose": "10-15 mg/kg", "frequencia": "2x/dia", "duracao": "5-7 dias"}
        ],
        "Intoxica√ß√£o": [
            {"nome": "Carv√£o ativado", "dose": "1-3 g/kg", "frequencia": "Imediato", "duracao": "1 dose"},
            {"nome": "Fluidos IV", "dose": "10-20 ml/kg/h", "frequencia": "Cont√≠nuo", "duracao": "24-48h"},
            {"nome": "Protetor hep√°tico", "dose": "20-50 mg/kg", "frequencia": "2x/dia", "duracao": "7-14 dias"}
        ],
        "Trauma": [
            {"nome": "Morfina", "dose": "0.1-0.3 mg/kg", "frequencia": "4-6x/dia", "duracao": "3-5 dias"},
            {"nome": "Anti-inflamat√≥rio", "dose": "0.2 mg/kg", "frequencia": "1x/dia", "duracao": "3-5 dias"},
            {"nome": "Antibi√≥tico profil√°tico", "dose": "10 mg/kg", "frequencia": "2x/dia", "duracao": "5-7 dias"}
        ],
        "Tumor": [
            {"nome": "Quimioterapia", "dose": "Conforme protocolo", "frequencia": "Semanal", "duracao": "4-6 ciclos"},
            {"nome": "Corticosteroides", "dose": "0.5-1 mg/kg", "frequencia": "2x/dia", "duracao": "Conforme resposta"},
            {"nome": "Analg√©sicos", "dose": "0.1-0.3 mg/kg", "frequencia": "2-3x/dia", "duracao": "Conforme necess√°rio"}
        ]
    }
    return medicamentos.get(diagnostico, [
        {"nome": "Tratamento sintom√°tico", "dose": "Conforme sintomas", "frequencia": "Conforme necess√°rio", "duracao": "At√© melhora"}
    ])

def sugerir_exames(diagnostico):
    """Sugere exames complementares baseados no diagn√≥stico"""
    exames = {
        "Doen√ßa renal": [
            {"exame": "Urina completa", "prioridade": "Alta", "justificativa": "Avaliar fun√ß√£o renal"},
            {"exame": "Protein√∫ria", "prioridade": "Alta", "justificativa": "Detectar perda de prote√≠nas"},
            {"exame": "Ultrassom abdominal", "prioridade": "Alta", "justificativa": "Avaliar morfologia renal"},
            {"exame": "Radiografia abdominal", "prioridade": "M√©dia", "justificativa": "Detectar c√°lculos ou obstru√ß√µes"},
            {"exame": "Press√£o arterial", "prioridade": "Alta", "justificativa": "Hipertens√£o renal comum"}
        ],
        "Infec√ß√£o": [
            {"exame": "Hemograma completo", "prioridade": "Alta", "justificativa": "Avaliar resposta inflamat√≥ria"},
            {"exame": "Cultura e antibiograma", "prioridade": "Alta", "justificativa": "Identificar pat√≥geno e sensibilidade"},
            {"exame": "PCR", "prioridade": "M√©dia", "justificativa": "Detectar infec√ß√£o sist√™mica"},
            {"exame": "Raio-X tor√°cico", "prioridade": "M√©dia", "justificativa": "Pneumonia ou outras infec√ß√µes"}
        ],
        "Tumor": [
            {"exame": "Bi√≥psia", "prioridade": "Alta", "justificativa": "Confirma√ß√£o histol√≥gica"},
            {"exame": "Radiografia tor√°cica", "prioridade": "Alta", "justificativa": "Estadiamento - met√°stases"},
            {"exame": "Ultrassom abdominal", "prioridade": "Alta", "justificativa": "Estadiamento - met√°stases"},
            {"exame": "CT/MRI", "prioridade": "M√©dia", "justificativa": "Avalia√ß√£o detalhada do tumor"}
        ],
        "Trauma": [
            {"exame": "Radiografia", "prioridade": "Alta", "justificativa": "Detectar fraturas ou les√µes"},
            {"exame": "Ultrassom FAST", "prioridade": "Alta", "justificativa": "Detectar hemorragia interna"},
            {"exame": "Hemograma", "prioridade": "Alta", "justificativa": "Avaliar perda sangu√≠nea"}
        ]
    }
    return exames.get(diagnostico, [
        {"exame": "Avalia√ß√£o cl√≠nica completa", "prioridade": "Alta", "justificativa": "Diagn√≥stico diferencial necess√°rio"}
    ])

def sugerir_cirurgias(diagnostico):
    """Sugere cirurgias e protocolos baseados no diagn√≥stico"""
    cirurgias = {
        "Tumor": {
            "procedimentos": ["Tumor excision", "Mastectomia", "Amputa√ß√£o", "Bi√≥psia cir√∫rgica"],
            "protocolo": "Protocolo oncol√≥gico: Pr√©-op: hemograma, fun√ß√£o renal/hep√°tica. P√≥s-op: quimioterapia adjuvante se indicado",
            "anestesia": {
                "premedicacao": "Midazolam 0.1-0.2 mg/kg + Morfina 0.1-0.3 mg/kg",
                "inducao": "Propofol 4-6 mg/kg IV",
                "manutencao": "Isoflurano 1-2% + Oxig√™nio",
                "analgesia_pos": "Morfina 0.1-0.3 mg/kg 4-6x/dia por 3-5 dias"
            }
        },
        "Trauma": {
            "procedimentos": ["Repara√ß√£o de fraturas", "Laparotomia explorat√≥ria", "Toracotomia", "Sutura de lacera√ß√µes"],
            "protocolo": "Protocolo de trauma: Estabiliza√ß√£o ‚Üí Cirurgia ‚Üí Monitoramento intensivo",
            "anestesia": {
                "premedicacao": "Midazolam 0.05-0.1 mg/kg + Fentanil 2-5 mcg/kg",
                "inducao": "Etomidato 0.5-1 mg/kg IV (hemodinamicamente est√°vel)",
                "manutencao": "Isoflurano 1-1.5% + Oxig√™nio",
                "analgesia_pos": "Fentanil 2-5 mcg/kg 2-3x/dia + Anti-inflamat√≥rio"
            }
        },
        "Obstru√ß√£o": {
            "procedimentos": ["Enterotomia", "Gastrotomia", "Uretrostomia", "Cistotomia"],
            "protocolo": "Protocolo de obstru√ß√£o: Descompress√£o ‚Üí Cirurgia ‚Üí Fluidoterapia agressiva",
            "anestesia": {
                "premedicacao": "Midazolam 0.1 mg/kg + Buprenorfina 0.01-0.02 mg/kg",
                "inducao": "Propofol 3-5 mg/kg IV",
                "manutencao": "Isoflurano 1-2% + Oxig√™nio",
                "analgesia_pos": "Buprenorfina 0.01-0.02 mg/kg 3x/dia por 5-7 dias"
            }
        },
        "Doen√ßa renal": {
            "procedimentos": ["Nefrectomia", "Ureterostomia", "Cistotomia", "Bi√≥psia renal"],
            "protocolo": "Protocolo renal: Fluidoterapia cuidadosa ‚Üí Monitoramento eletr√≥litos ‚Üí Cirurgia se necess√°rio",
            "anestesia": {
                "premedicacao": "Midazolam 0.05 mg/kg + Morfina 0.05-0.1 mg/kg",
                "inducao": "Propofol 2-4 mg/kg IV",
                "manutencao": "Isoflurano 0.8-1.5% + Oxig√™nio",
                "analgesia_pos": "Morfina 0.05-0.1 mg/kg 3-4x/dia + Monitoramento renal"
            }
        }
    }
    return cirurgias.get(diagnostico, {
        "procedimentos": ["Avalia√ß√£o cir√∫rgica necess√°ria"],
        "protocolo": "Protocolo padr√£o: Avalia√ß√£o pr√©-anest√©sica ‚Üí Cirurgia ‚Üí Monitoramento p√≥s-operat√≥rio",
        "anestesia": {
            "premedicacao": "Midazolam 0.1 mg/kg + Analg√©sico",
            "inducao": "Propofol 4-6 mg/kg IV",
            "manutencao": "Isoflurano 1-2% + Oxig√™nio",
            "analgesia_pos": "Analgesia multimodal conforme necess√°rio"
        }
    })

# Sistema de abas
tab_names = ["üîç Predi√ß√£o", "üí¨ Chat IA"]
tabs = st.tabs(tab_names)

# ABA 1: PREDI√á√ÉO
with tabs[0]:
    st.subheader("üîç Predi√ß√£o de Diagn√≥stico")

# Fun√ß√£o para carregar modelo
@st.cache_data
def carregar_modelo():
    """Carrega o modelo treinado"""
    try:
        # Lista de caminhos poss√≠veis para o modelo (Streamlit Cloud compat√≠vel)
        possible_paths = [
            "VET/models/model_minimal.pkl",
            "VET/models/gb_model_optimized.pkl", 
            "VET/models/gb_optimized_model.pkl",
            "./VET/models/model_minimal.pkl",
            "./VET/models/gb_model_optimized.pkl",
            "./VET/models/gb_optimized_model.pkl",
            "models/model_minimal.pkl",
            "models/gb_model_optimized.pkl",
            "models/gb_optimized_model.pkl"
        ]
        
        model_data = None
        found_path = None
        
        for model_path in possible_paths:
            if Path(model_path).exists():
                found_path = model_path
                model_data = joblib.load(model_path)
                break
        
        if model_data is not None:
            st.success(f"‚úÖ Modelo encontrado em: {found_path}")
            return model_data
        else:
            st.error("‚ùå Modelo n√£o encontrado em nenhum dos caminhos:")
            for path in possible_paths:
                exists = "‚úÖ" if Path(path).exists() else "‚ùå"
                st.write(f"  {exists} {path}")
            
            st.info(f"üìÅ Diret√≥rio atual: {Path.cwd()}")
            st.info(f"üìÇ Conte√∫do do diret√≥rio: {list(Path('.').iterdir())}")
            
            # Verificar se existe pasta models
            if Path("models").exists():
                st.info(f"üìÇ Conte√∫do da pasta models: {list(Path('models').iterdir())}")
            
            return None
        
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar modelo: {e}")
        st.code(traceback.format_exc())
        return None

# Carregar modelo
    with st.spinner("üîÑ Carregando modelo..."):
model_data = carregar_modelo()

if model_data is None:
        st.error("‚ùå N√£o foi poss√≠vel carregar o modelo!")
        st.info("üìß Verifique se o arquivo do modelo existe e tente novamente.")
        
        # Mostrar informa√ß√µes de debug
        with st.expander("üîç Informa√ß√µes de Debug", expanded=True):
            st.write("**Diret√≥rio atual:**", Path.cwd())
            st.write("**Arquivos no diret√≥rio:**", list(Path('.').iterdir()))
            if Path("models").exists():
                st.write("**Arquivos em models/:**", list(Path("models").iterdir()))
            else:
                st.write("‚ùå Pasta 'models' n√£o encontrada")
        
    st.stop()

# Extrair componentes do modelo
modelo = model_data['model']
scaler = model_data['scaler']
le_diagnostico = model_data['le_diagnostico']
accuracy = model_data.get('accuracy', 0)
training_date = model_data.get('timestamp', 'N/A')

# Mostrar informa√ß√µes do modelo
col1, col2, col3 = st.columns(3)
with col1:
    st.markdown('<div class="metric-box">', unsafe_allow_html=True)
    st.metric("üéØ Acur√°cia do Modelo", f"{accuracy:.1%}")
    st.markdown('</div>', unsafe_allow_html=True)

with col2:
    st.markdown('<div class="metric-box">', unsafe_allow_html=True)
    st.metric("üìä √öltima Atualiza√ß√£o", training_date.split('T')[0] if 'T' in training_date else training_date)
    st.markdown('</div>', unsafe_allow_html=True)

with col3:
    st.markdown('<div class="metric-box">', unsafe_allow_html=True)
    st.metric("üß† Tipo de Modelo", "Gradient Boosting")
    st.markdown('</div>', unsafe_allow_html=True)

st.divider()

# Formul√°rio de predi√ß√£o
st.subheader("üîç Predi√ß√£o de Diagn√≥stico")

# Dividir em colunas para melhor organiza√ß√£o
col1, col2 = st.columns(2)

with col1:
    st.markdown('<div class="form-section">', unsafe_allow_html=True)
    st.markdown("**üìã Dados B√°sicos do Animal**")
    
    especie = st.selectbox(
        "Esp√©cie",
        options=["Canina", "Felina", "Equina", "Bovino", "Su√≠no", "Ave", "Outro"],
        help="Selecione a esp√©cie do animal"
    )
    
    raca = st.text_input(
        "Ra√ßa",
        placeholder="Ex: Labrador, Persa, SRD...",
        help="Digite a ra√ßa do animal"
    )
    
    idade_anos = st.number_input(
        "Idade (anos)",
        min_value=0.0,
        max_value=30.0,
        value=1.0,
        step=0.1,
        help="Idade do animal em anos"
    )
    
    sexo = st.selectbox(
        "Sexo",
        options=["M", "F"],
        help="Sexo do animal"
    )
    st.markdown('</div>', unsafe_allow_html=True)

with col2:
    st.markdown('<div class="form-section">', unsafe_allow_html=True)
    st.markdown("**üß™ Exames Laboratoriais**")
    
    hemoglobina = st.number_input(
        "Hemoglobina (g/dL)",
        min_value=0.0,
        max_value=30.0,
        value=12.0,
        step=0.1,
        help="Valor de hemoglobina"
    )
    
    hematocrito = st.number_input(
        "Hemat√≥crito (%)",
        min_value=0.0,
        max_value=100.0,
        value=40.0,
        step=0.1,
        help="Valor de hemat√≥crito"
    )
    
    leucocitos = st.number_input(
        "Leuc√≥citos (x10¬≥/ŒºL)",
        min_value=0.0,
        max_value=100.0,
        value=10.0,
        step=0.1,
        help="Contagem de leuc√≥citos"
    )
    
    glicose = st.number_input(
        "Glicose (mg/dL)",
        min_value=0.0,
        max_value=500.0,
        value=100.0,
        step=1.0,
        help="N√≠vel de glicose"
    )
    st.markdown('</div>', unsafe_allow_html=True)

# Segunda linha de exames
col3, col4 = st.columns(2)

with col3:
    st.markdown('<div class="form-section">', unsafe_allow_html=True)
    st.markdown("**üî¨ Mais Exames**")
    
    ureia = st.number_input(
        "Ureia (mg/dL)",
        min_value=0.0,
        max_value=200.0,
        value=30.0,
        step=1.0,
        help="N√≠vel de ureia"
    )
    
    creatinina = st.number_input(
        "Creatinina (mg/dL)",
        min_value=0.0,
        max_value=10.0,
        value=1.0,
        step=0.1,
        help="N√≠vel de creatinina"
    )
    
    alt = st.number_input(
        "ALT (U/L)",
        min_value=0.0,
        max_value=1000.0,
        value=50.0,
        step=1.0,
        help="Alanina aminotransferase"
    )
    st.markdown('</div>', unsafe_allow_html=True)

with col4:
    st.markdown('<div class="form-section">', unsafe_allow_html=True)
    st.markdown("**üè• Sintomas Cl√≠nicos**")
    
    # Sintomas como checkboxes
    febre = st.checkbox("Febre")
    apatia = st.checkbox("Apatia")
    perda_peso = st.checkbox("Perda de Peso")
    vomito = st.checkbox("V√¥mito")
    diarreia = st.checkbox("Diarreia")
    tosse = st.checkbox("Tosse")
    letargia = st.checkbox("Letargia")
    feridas_cutaneas = st.checkbox("Feridas Cut√¢neas")
    poliuria = st.checkbox("Poli√∫ria")
    polidipsia = st.checkbox("Polidipsia")
    st.markdown('</div>', unsafe_allow_html=True)

# Bot√£o de predi√ß√£o
if st.button("üîç Realizar Predi√ß√£o", type="primary", use_container_width=True):
    
    # Preparar dados para predi√ß√£o
    try:
        # Converter sintomas para valores bin√°rios
        sintomas = [febre, apatia, perda_peso, vomito, diarreia, tosse, letargia, feridas_cutaneas, poliuria, polidipsia]
        sintomas_values = [1 if s else 0 for s in sintomas]
        
        # Criar array com todos os dados (39 features)
        dados_predicao = np.array([
            # Esp√©cie (2 features)
            especie == "Canina", especie == "Felina",
            # Idade e sexo (2 features)
            idade_anos, sexo == "M",
            # Exames laboratoriais b√°sicos (8 features)
            hemoglobina, hematocrito, leucocitos, 10.0,  # Plaquetas padr√£o
            glicose, ureia, creatinina, alt,
            # Mais exames laboratoriais (10 features)
            50.0,  # AST padr√£o
            100.0, 7.0, 3.5, 200.0, 100.0, 2.0,  # Outros exames padr√£o
            1.0, 1.5, 2.0,  # Mais 3 exames padr√£o
            # Sintomas cl√≠nicos (17 features)
        ] + sintomas_values + [0, 0, 0, 0, 0, 0, 0]).reshape(1, -1)
        
        # Fazer predi√ß√£o
        predicao = modelo.predict(dados_predicao)
        probabilidades = modelo.predict_proba(dados_predicao)
        
        # Obter diagn√≥stico
        diagnostico_predito = le_diagnostico.inverse_transform(predicao)[0]
        confianca = max(probabilidades[0]) * 100
        
        # Mostrar resultado
        st.markdown('<div class="prediction-box">', unsafe_allow_html=True)
        st.markdown(f"### üéØ **Diagn√≥stico Predito: {diagnostico_predito}**")
        st.markdown(f"### üìä **Confian√ßa: {confianca:.1f}%**")
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Sugest√µes baseadas no diagn√≥stico
        st.subheader("üìã Recomenda√ß√µes Baseadas no Diagn√≥stico")
        
        # Primeira linha: Exames e Doen√ßas
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üî¨ Exames Complementares")
            exames = sugerir_exames(diagnostico_predito)
            for exame in exames:
                prioridade_color = "üî¥" if exame['prioridade'] == "Alta" else "üü°"
                st.markdown(f"{prioridade_color} **{exame['exame']}** ({exame['prioridade']})")
                st.markdown(f"   *{exame['justificativa']}*")
                st.markdown("")
        
        with col2:
            st.subheader("üè• Doen√ßas Relacionadas")
            doencas = sugerir_doencas(diagnostico_predito)
            for doenca in doencas:
                st.markdown(f"‚Ä¢ {doenca}")
        
        # Segunda linha: Medicamentos
        st.subheader("üíä Protocolo de Medica√ß√£o")
        medicamentos = sugerir_medicamentos(diagnostico_predito)
        for med in medicamentos:
            with st.expander(f"üíä {med['nome']}"):
                st.markdown(f"**Dose:** {med['dose']}")
                st.markdown(f"**Frequ√™ncia:** {med['frequencia']}")
                st.markdown(f"**Dura√ß√£o:** {med['duracao']}")
        
        # Terceira linha: Cirurgia e Anestesia
        col3, col4 = st.columns(2)
        
        with col3:
            st.subheader("üî™ Protocolo Cir√∫rgico")
            cirurgias = sugerir_cirurgias(diagnostico_predito)
            st.markdown(f"**Procedimentos:**")
            for procedimento in cirurgias['procedimentos']:
                st.markdown(f"‚Ä¢ {procedimento}")
            
            st.markdown(f"**Protocolo:** {cirurgias['protocolo']}")
        
        with col4:
            st.subheader("üíâ Protocolo de Anestesia")
            anestesia = cirurgias['anestesia']
            st.markdown(f"**Pr√©-medica√ß√£o:** {anestesia['premedicacao']}")
            st.markdown(f"**Indu√ß√£o:** {anestesia['inducao']}")
            st.markdown(f"**Manuten√ß√£o:** {anestesia['manutencao']}")
            st.markdown(f"**Analgesia p√≥s-op:** {anestesia['analgesia_pos']}")
        
        # Recomenda√ß√µes personalizadas do DeepSeek
        st.subheader("ü§ñ Recomenda√ß√µes Personalizadas (IA)")
        if st.button("üîç Obter Recomenda√ß√µes Personalizadas"):
            with st.spinner("Consultando IA para recomenda√ß√µes personalizadas..."):
                sintomas_lista = [nome for nome, valor in [
                    ("Febre", febre), ("Apatia", apatia), ("Perda de peso", perda_peso),
                    ("V√¥mito", vomito), ("Diarreia", diarreia), ("Tosse", tosse),
                    ("Letargia", letargia), ("Feridas cut√¢neas", feridas_cutaneas),
                    ("Poli√∫ria", poliuria), ("Polidipsia", polidipsia)
                ] if valor]
                
                dados_lab = f"Hb: {hemoglobina}, Ht: {hematocrito}, Leuc√≥citos: {leucocitos}, Glicose: {glicose}, Ureia: {ureia}, Creatinina: {creatinina}, ALT: {alt}"
                
                recomendacoes = obter_recomendacoes_personalizadas(diagnostico_predito, sintomas_lista, dados_lab)
                st.markdown(recomendacoes)
        
        st.divider()
        
        # Mostrar probabilidades de todos os diagn√≥sticos
        st.subheader("üìà Probabilidades por Diagn√≥stico")
        
        probabilidades_df = pd.DataFrame({
            'Diagn√≥stico': le_diagnostico.classes_,
            'Probabilidade (%)': probabilidades[0] * 100
        }).sort_values('Probabilidade (%)', ascending=False)
        
        # Gr√°fico de barras das probabilidades
        import plotly.express as px
        fig = px.bar(
            probabilidades_df.head(5),
            x='Probabilidade (%)',
            y='Diagn√≥stico',
            orientation='h',
            title='Top 5 Diagn√≥sticos Mais Prov√°veis',
            color='Probabilidade (%)',
            color_continuous_scale='Blues'
        )
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
        
        # Tabela com todas as probabilidades
        st.dataframe(probabilidades_df, use_container_width=True)
        
        # Log da predi√ß√£o para an√°lise posterior
        log_predicao = {
            'timestamp': datetime.now().isoformat(),
            'especie': especie,
            'idade': idade_anos,
            'sexo': sexo,
            'sintomas': sintomas,
            'diagnostico_predito': diagnostico_predito,
            'confianca': confianca,
            'probabilidades': probabilidades[0].tolist()
        }
        
        # Salvar log (implementar sistema de logging posteriormente)
        st.markdown('<div class="success-message">‚úÖ Predi√ß√£o realizada com sucesso!</div>', unsafe_allow_html=True)
        
    except Exception as e:
        st.error(f"‚ùå Erro na predi√ß√£o: {e}")
        st.info("Por favor, verifique os dados inseridos e tente novamente.")

# ABA 2: CHAT IA
with tabs[1]:
    st.subheader("üí¨ Chat com IA Veterin√°ria")
    st.info("ü§ñ Converse com nossa IA especializada em medicina veterin√°ria. Fa√ßa perguntas sobre diagn√≥sticos, tratamentos e casos cl√≠nicos.")
    
    # Interface do chat
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Container do chat
        chat_container = st.container()
        
        with chat_container:
            # Mostrar hist√≥rico do chat
            for message in st.session_state.chat_history:
                if message["role"] == "user":
                    st.markdown(f'<div class="chat-message user-message"><strong>Voc√™:</strong><br>{message["content"]}</div>', unsafe_allow_html=True)
                else:
                    st.markdown(f'<div class="chat-message assistant-message"><strong>IA Veterin√°ria:</strong><br>{message["content"]}</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown("**üí° Dicas:**")
        st.markdown("‚Ä¢ Pergunte sobre sintomas")
        st.markdown("‚Ä¢ Consulte diagn√≥sticos")
        st.markdown("‚Ä¢ Solicite tratamentos")
        st.markdown("‚Ä¢ Pe√ßa exames")
        
        if st.button("üóëÔ∏è Limpar Chat"):
            st.session_state.chat_history = []
            st.rerun()
    
    # Input do usu√°rio
    user_input = st.text_area("Digite sua pergunta:", height=100, placeholder="Ex: C√£o com v√¥mito e diarreia h√° 2 dias, o que pode ser?")
    
    col1, col2, col3 = st.columns([1, 1, 2])
    with col1:
        if st.button("üì§ Enviar", type="primary"):
            if user_input.strip():
                # Adicionar mensagem do usu√°rio
                st.session_state.chat_history.append({
                    "role": "user",
                    "content": user_input,
                    "timestamp": datetime.now()
                })
                
                # Gerar resposta da IA
                with st.spinner("ü§ñ IA pensando..."):
                    context = f"Hist√≥rico: {len(st.session_state.chat_history)} mensagens"
                    ai_response = call_deepseek_api(user_input, context)
                
                # Adicionar resposta da IA
                st.session_state.chat_history.append({
                    "role": "assistant", 
                    "content": ai_response,
                    "timestamp": datetime.now()
                })
                
                st.rerun()
    
    with col2:
        if st.button("üîÑ Nova Aba"):
            new_tab_name = f"Chat {len(st.session_state.chat_tabs) + 1}"
            st.session_state.chat_tabs.append(new_tab_name)
            st.rerun()


# Footer
st.divider()
st.markdown("""
<div style="text-align: center; color: #666; margin-top: 2rem;">
    <p>üêæ VetDiagnosisAI - Sistema Inteligente de Diagn√≥stico Veterin√°rio</p>
    <p><small>Para d√∫vidas ou suporte, entre em contato com o administrador do sistema.</small></p>
</div>
""", unsafe_allow_html=True)
